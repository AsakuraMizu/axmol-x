diff --git a/include/tsl/robin_growth_policy.h b/include/tsl/robin_growth_policy.h
index 62f9a2e..fa576a9 100644
--- a/include/tsl/robin_growth_policy.h
+++ b/include/tsl/robin_growth_policy.h
@@ -132,7 +132,7 @@ class power_of_two_growth_policy {
    */
   std::size_t max_bucket_count() const {
     // Largest power of two.
-    return (std::numeric_limits<std::size_t>::max() / 2) + 1;
+    return ((std::numeric_limits<std::size_t>::max)() / 2) + 1;
   }
 
   /**
@@ -224,7 +224,7 @@ class mod_growth_policy {
   static constexpr double REHASH_SIZE_MULTIPLICATION_FACTOR =
       1.0 * GrowthFactor::num / GrowthFactor::den;
   static const std::size_t MAX_BUCKET_COUNT =
-      std::size_t(double(std::numeric_limits<std::size_t>::max() /
+      std::size_t(double((std::numeric_limits<std::size_t>::max)() /
                          REHASH_SIZE_MULTIPLICATION_FACTOR));
 
   static_assert(REHASH_SIZE_MULTIPLICATION_FACTOR >= 1.1,
@@ -395,7 +395,7 @@ class prime_growth_policy {
  private:
   unsigned int m_iprime;
 
-  static_assert(std::numeric_limits<decltype(m_iprime)>::max() >=
+  static_assert((std::numeric_limits<decltype(m_iprime)>::max)() >=
                     detail::PRIMES.size(),
                 "The type of m_iprime is not big enough.");
 };
diff --git a/include/tsl/robin_hash.h b/include/tsl/robin_hash.h
index 98643e6..f8b6144 100644
--- a/include/tsl/robin_hash.h
+++ b/include/tsl/robin_hash.h
@@ -68,7 +68,7 @@ struct is_power_of_two_policy<tsl::rh::power_of_two_growth_policy<GrowthFactor>>
 // Only available in C++17, we need to be compatible with C++11
 template <class T>
 const T& clamp(const T& v, const T& lo, const T& hi) {
-  return std::min(hi, std::max(lo, v));
+  return (std::min)(hi, (std::max)(lo, v));
 }
 
 template <typename T, typename U>
@@ -106,8 +106,8 @@ static T deserialize_value(Deserializer& deserializer) {
  * must be the same size on both platforms.
  */
 using slz_size_type = std::uint64_t;
-static_assert(std::numeric_limits<slz_size_type>::max() >=
-                  std::numeric_limits<std::size_t>::max(),
+static_assert((std::numeric_limits<slz_size_type>::max)() >=
+                  (std::numeric_limits<std::size_t>::max)(),
               "slz_size_type must be >= std::size_t");
 
 using truncated_hash_type = std::uint32_t;
@@ -312,7 +312,7 @@ class bucket_entry : public bucket_entry_hash<StoreHash> {
   static const distance_type EMPTY_MARKER_DIST_FROM_IDEAL_BUCKET = -1;
   static const distance_type DIST_FROM_IDEAL_BUCKET_LIMIT = 4096;
   static_assert(DIST_FROM_IDEAL_BUCKET_LIMIT <=
-                    std::numeric_limits<distance_type>::max() - 1,
+                    (std::numeric_limits<distance_type>::max)() - 1,
                 "DIST_FROM_IDEAL_BUCKET_LIMIT must be <= "
                 "std::numeric_limits<distance_type>::max() - 1.");
 
@@ -344,7 +344,7 @@ class bucket_entry : public bucket_entry_hash<StoreHash> {
  *
  * Behaviour is undefined if the destructor of `ValueType` throws.
  */
-template <class ValueType, class KeySelect, class ValueSelect, class Hash,
+template <class ValueType, class IteratorValueType, class KeySelect, class ValueSelect, class Hash,
           class KeyEqual, class Allocator, bool StoreHash, class GrowthPolicy>
 class robin_hash : private Hash, private KeyEqual, private GrowthPolicy {
  private:
@@ -357,13 +357,10 @@ class robin_hash : private Hash, private KeyEqual, private GrowthPolicy {
       "GrowthPolicy::bucket_for_hash must be noexcept.");
   static_assert(noexcept(std::declval<GrowthPolicy>().clear()),
                 "GrowthPolicy::clear must be noexcept.");
-
  public:
-  template <bool IsConst>
-  class robin_iterator;
-
   using key_type = typename KeySelect::key_type;
   using value_type = ValueType;
+  using iterator_value_type = IteratorValueType;
   using size_type = std::size_t;
   using difference_type = std::ptrdiff_t;
   using hasher = Hash;
@@ -373,8 +370,7 @@ class robin_hash : private Hash, private KeyEqual, private GrowthPolicy {
   using const_reference = const value_type&;
   using pointer = value_type*;
   using const_pointer = const value_type*;
-  using iterator = robin_iterator<false>;
-  using const_iterator = robin_iterator<true>;
+
 
  private:
   /**
@@ -412,22 +408,21 @@ class robin_hash : private Hash, private KeyEqual, private GrowthPolicy {
     } else if (STORE_HASH && is_power_of_two_policy<GrowthPolicy>::value) {
       return bucket_count == 0 ||
              (bucket_count - 1) <=
-                 std::numeric_limits<truncated_hash_type>::max();
+                 (std::numeric_limits<truncated_hash_type>::max)();
     } else {
       TSL_RH_UNUSED(bucket_count);
       return false;
     }
   }
 
+public:
   using bucket_entry =
       tsl::detail_robin_hash::bucket_entry<value_type, STORE_HASH>;
   using distance_type = typename bucket_entry::distance_type;
 
-  using buckets_allocator = typename std::allocator_traits<
-      allocator_type>::template rebind_alloc<bucket_entry>;
+  using buckets_allocator      = typename std::allocator_traits<allocator_type>::template rebind_alloc<bucket_entry>;
   using buckets_container_type = std::vector<bucket_entry, buckets_allocator>;
 
- public:
   /**
    * The 'operator*()' and 'operator->()' methods return a const reference and
    * const pointer respectively to the stored value type.
@@ -439,94 +434,156 @@ class robin_hash : private Hash, private KeyEqual, private GrowthPolicy {
    * instead of a `const std::pair<Key, T>&`, the user may modify the key which
    * will put the map in a undefined state.
    */
-  template <bool IsConst>
-  class robin_iterator {
-    friend class robin_hash;
-
-   private:
-    using bucket_entry_ptr =
-        typename std::conditional<IsConst, const bucket_entry*,
-                                  bucket_entry*>::type;
-
-    robin_iterator(bucket_entry_ptr bucket) noexcept : m_bucket(bucket) {}
-
-   public:
-    using iterator_category = std::forward_iterator_tag;
-    using value_type = const typename robin_hash::value_type;
-    using difference_type = std::ptrdiff_t;
-    using reference = value_type&;
-    using pointer = value_type*;
-
-    robin_iterator() noexcept {}
-
-    // Copy constructor from iterator to const_iterator.
-    template <bool TIsConst = IsConst,
-              typename std::enable_if<TIsConst>::type* = nullptr>
-    robin_iterator(const robin_iterator<!TIsConst>& other) noexcept
-        : m_bucket(other.m_bucket) {}
-
-    robin_iterator(const robin_iterator& other) = default;
-    robin_iterator(robin_iterator&& other) = default;
-    robin_iterator& operator=(const robin_iterator& other) = default;
-    robin_iterator& operator=(robin_iterator&& other) = default;
-
-    const typename robin_hash::key_type& key() const {
-      return KeySelect()(m_bucket->value());
-    }
+  class robin_iterator
+  {
+      friend class robin_hash;
 
-    template <class U = ValueSelect,
-              typename std::enable_if<has_mapped_type<U>::value &&
-                                      IsConst>::type* = nullptr>
-    const typename U::value_type& value() const {
-      return U()(m_bucket->value());
-    }
+  private:
+      using bucket_entry_ptr = typename std::conditional<false, const bucket_entry*, bucket_entry*>::type;
 
-    template <class U = ValueSelect,
-              typename std::enable_if<has_mapped_type<U>::value &&
-                                      !IsConst>::type* = nullptr>
-    typename U::value_type& value() const {
-      return U()(m_bucket->value());
-    }
+      robin_iterator(bucket_entry_ptr bucket) noexcept : m_bucket(bucket) {}
 
-    reference operator*() const { return m_bucket->value(); }
+  public:
+      using iterator_category = std::forward_iterator_tag;
+      using value_type        = typename robin_hash::iterator_value_type;
+      using difference_type   = std::ptrdiff_t;
+      using reference         = value_type&;
+      using pointer           = value_type*;
 
-    pointer operator->() const { return std::addressof(m_bucket->value()); }
+      robin_iterator() noexcept {}
 
-    robin_iterator& operator++() {
-      while (true) {
-        if (m_bucket->last_bucket()) {
-          ++m_bucket;
-          return *this;
-        }
+      robin_iterator(const robin_iterator& other) = default;
+      robin_iterator(robin_iterator&& other)      = default;
+      robin_iterator& operator=(const robin_iterator& other) = default;
+      robin_iterator& operator=(robin_iterator&& other) = default;
 
-        ++m_bucket;
-        if (!m_bucket->empty()) {
-          return *this;
-        }
+      const typename robin_hash::key_type& key() const { return KeySelect()(m_bucket->value()); }
+
+      template <class U = ValueSelect, typename std::enable_if<has_mapped_type<U>::value>::type* = nullptr>
+      typename U::value_type& value() const
+      {
+          return U()(m_bucket->value());
       }
-    }
 
-    robin_iterator operator++(int) {
-      robin_iterator tmp(*this);
-      ++*this;
+      reference operator*() const { return *reinterpret_cast<pointer>(std::addressof(m_bucket->value())); }
 
-      return tmp;
-    }
+      pointer operator->() const { return reinterpret_cast<pointer>(std::addressof(m_bucket->value())); }
 
-    friend bool operator==(const robin_iterator& lhs,
-                           const robin_iterator& rhs) {
-      return lhs.m_bucket == rhs.m_bucket;
-    }
+      robin_iterator& operator++()
+      {
+          while (true)
+          {
+              if (m_bucket->last_bucket())
+              {
+                  ++m_bucket;
+                  return *this;
+              }
 
-    friend bool operator!=(const robin_iterator& lhs,
-                           const robin_iterator& rhs) {
-      return !(lhs == rhs);
-    }
+              ++m_bucket;
+              if (!m_bucket->empty())
+              {
+                  return *this;
+              }
+          }
+      }
+
+      robin_iterator operator++(int)
+      {
+          robin_iterator tmp(*this);
+          ++*this;
+
+          return tmp;
+      }
+
+      friend bool operator==(const robin_iterator& lhs, const robin_iterator& rhs)
+      {
+          return lhs.m_bucket == rhs.m_bucket;
+      }
+
+      friend bool operator!=(const robin_iterator& lhs, const robin_iterator& rhs) { return !(lhs == rhs); }
+
+  private:
+      bucket_entry_ptr m_bucket;
+  };
+
+  class robin_const_iterator
+  {
+      friend class robin_hash;
+
+  private:
+      using bucket_entry_ptr = typename std::conditional<true, const bucket_entry*, bucket_entry*>::type;
+
+      robin_const_iterator(bucket_entry_ptr bucket) noexcept : m_bucket(bucket) {}
 
-   private:
-    bucket_entry_ptr m_bucket;
+  public:
+      using iterator_category = std::forward_iterator_tag;
+      using value_type        = const typename robin_hash::value_type;
+      using difference_type   = std::ptrdiff_t;
+      using reference         = value_type&;
+      using pointer           = value_type*;
+
+      robin_const_iterator() noexcept {}
+
+      // Copy constructor from iterator to const_iterator.
+      robin_const_iterator(const robin_iterator& other) noexcept : m_bucket(other.m_bucket) {}
+
+      robin_const_iterator(const robin_const_iterator& other) = default;
+      robin_const_iterator(robin_const_iterator&& other) = default;
+      robin_const_iterator& operator=(const robin_const_iterator& other) = default;
+      robin_const_iterator& operator=(robin_const_iterator&& other) = default;
+
+      const typename robin_hash::key_type& key() const { return KeySelect()(m_bucket->value()); }
+
+      template <class U = ValueSelect, typename std::enable_if<has_mapped_type<U>::value>::type* = nullptr>
+      const typename U::value_type& value() const
+      {
+          return U()(m_bucket->value());
+      }
+
+      reference operator*() const { return m_bucket->value(); }
+
+      pointer operator->() const { return std::addressof(m_bucket->value()); }
+
+      robin_const_iterator& operator++()
+      {
+          while (true)
+          {
+              if (m_bucket->last_bucket())
+              {
+                  ++m_bucket;
+                  return *this;
+              }
+
+              ++m_bucket;
+              if (!m_bucket->empty())
+              {
+                  return *this;
+              }
+          }
+      }
+
+      robin_const_iterator operator++(int)
+      {
+          robin_const_iterator tmp(*this);
+          ++*this;
+
+          return tmp;
+      }
+
+      friend bool operator==(const robin_const_iterator& lhs, const robin_const_iterator& rhs)
+      {
+          return lhs.m_bucket == rhs.m_bucket;
+      }
+
+      friend bool operator!=(const robin_const_iterator& lhs, const robin_const_iterator& rhs) { return !(lhs == rhs); }
+
+  private:
+      bucket_entry_ptr m_bucket;
   };
 
+  using iterator = robin_iterator;
+  using const_iterator = robin_const_iterator;
+
  public:
 #if defined(__cplusplus) && __cplusplus >= 201402L
   robin_hash(size_type bucket_count, const Hash& hash, const KeyEqual& equal,
@@ -536,23 +593,18 @@ class robin_hash : private Hash, private KeyEqual, private GrowthPolicy {
       : Hash(hash),
         KeyEqual(equal),
         GrowthPolicy(bucket_count),
-        m_buckets_data(
-            [&]() {
-              if (bucket_count > max_bucket_count()) {
-                TSL_RH_THROW_OR_TERMINATE(
-                    std::length_error,
-                    "The map exceeds its maximum bucket count.");
-              }
-
-              return bucket_count;
-            }(),
-            alloc),
+        m_buckets_data(bucket_count, alloc),
         m_buckets(m_buckets_data.empty() ? static_empty_bucket_ptr()
                                          : m_buckets_data.data()),
         m_bucket_count(bucket_count),
         m_nb_elements(0),
         m_grow_on_next_insert(false),
         m_try_shrink_on_next_insert(false) {
+    if (bucket_count > max_bucket_count()) {
+      TSL_RH_THROW_OR_TERMINATE(std::length_error,
+                                "The map exceeds its maximum bucket count.");
+    }
+
     if (m_bucket_count > 0) {
       tsl_rh_assert(!m_buckets_data.empty());
       m_buckets_data.back().set_as_last_bucket();
@@ -866,7 +918,7 @@ class robin_hash : private Hash, private KeyEqual, private GrowthPolicy {
 
     const std::size_t ireturn_bucket =
         ito_move_closer_value -
-        std::min(
+        (std::min)(
             ito_move_closer_value - icloser_bucket,
             std::size_t(
                 m_buckets[ito_move_closer_value].dist_from_ideal_bucket()));
@@ -875,7 +927,7 @@ class robin_hash : private Hash, private KeyEqual, private GrowthPolicy {
            m_buckets[ito_move_closer_value].dist_from_ideal_bucket() > 0) {
       icloser_bucket =
           ito_move_closer_value -
-          std::min(
+          (std::min)(
               ito_move_closer_value - icloser_bucket,
               std::size_t(
                   m_buckets[ito_move_closer_value].dist_from_ideal_bucket()));
@@ -1045,7 +1097,7 @@ class robin_hash : private Hash, private KeyEqual, private GrowthPolicy {
   size_type bucket_count() const { return m_bucket_count; }
 
   size_type max_bucket_count() const {
-    return std::min(GrowthPolicy::max_bucket_count(),
+    return (std::min)(GrowthPolicy::max_bucket_count(),
                     m_buckets_data.max_size());
   }
 
@@ -1076,7 +1128,7 @@ class robin_hash : private Hash, private KeyEqual, private GrowthPolicy {
   }
 
   void rehash(size_type count_) {
-    count_ = std::max(count_,
+    count_ = (std::max)(count_,
                      size_type(std::ceil(float(size()) / max_load_factor())));
     rehash_impl(count_);
   }
diff --git a/include/tsl/robin_map.h b/include/tsl/robin_map.h
index 3de7a59..b6c1577 100644
--- a/include/tsl/robin_map.h
+++ b/include/tsl/robin_map.h
@@ -119,9 +119,11 @@ class robin_map {
     value_type& operator()(std::pair<Key, T>& key_value) noexcept {
       return key_value.second;
     }
+
+    value_type& operator()(std::pair<const Key, T>& key_value) noexcept { return key_value.second; }
   };
 
-  using ht = detail_robin_hash::robin_hash<std::pair<Key, T>, KeySelect,
+  using ht = detail_robin_hash::robin_hash<std::pair<Key, T>, std::pair<const Key, T>, KeySelect,
                                            ValueSelect, Hash, KeyEqual,
                                            Allocator, StoreHash, GrowthPolicy>;
 
@@ -129,6 +131,7 @@ class robin_map {
   using key_type = typename ht::key_type;
   using mapped_type = T;
   using value_type = typename ht::value_type;
+  using iterator_value_type = typename ht::iterator_value_type;
   using size_type = typename ht::size_type;
   using difference_type = typename ht::difference_type;
   using hasher = typename ht::hasher;
@@ -445,8 +448,15 @@ class robin_map {
     return m_ht.at(key, precalculated_hash);
   }
 
-  T& operator[](const Key& key) { return m_ht[key]; }
-  T& operator[](Key&& key) { return m_ht[std::move(key)]; }
+  template <
+      class K, class KE = KeyEqual,
+      typename std::enable_if<has_is_transparent<KE>::value>::type* = nullptr>
+  T& operator[](const K& key) { return m_ht[key]; }
+  
+  template <
+      class K, class KE = KeyEqual,
+      typename std::enable_if<has_is_transparent<KE>::value>::type* = nullptr>
+  T& operator[](K&& key) { return m_ht[std::forward<K>(key)]; }
 
   size_type count(const Key& key) const { return m_ht.count(key); }
 
diff --git a/include/tsl/robin_set.h b/include/tsl/robin_set.h
index 5478950..0813966 100644
--- a/include/tsl/robin_set.h
+++ b/include/tsl/robin_set.h
@@ -101,12 +101,13 @@ class robin_set {
     key_type& operator()(Key& key) noexcept { return key; }
   };
 
-  using ht = detail_robin_hash::robin_hash<Key, KeySelect, void, Hash, KeyEqual,
+  using ht = detail_robin_hash::robin_hash<Key, const Key, KeySelect, void, Hash, KeyEqual,
                                            Allocator, StoreHash, GrowthPolicy>;
 
  public:
   using key_type = typename ht::key_type;
   using value_type = typename ht::value_type;
+  using iterator_value_type = typename ht::iterator_value_type;
   using size_type = typename ht::size_type;
   using difference_type = typename ht::difference_type;
   using hasher = typename ht::hasher;
